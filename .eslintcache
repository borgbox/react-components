[{"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\index.tsx":"1","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\reportWebVitals.ts":"2","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\App.tsx":"3","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\navbar\\index.tsx":"4","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\card\\index.tsx":"5","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\radial-chart\\index.tsx":"6","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\gauge\\index.tsx":"7","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\radial-gauge\\index.tsx":"8","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\value-card-indicator\\index.tsx":"9","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\value-circle-card-indicator\\index.tsx":"10","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\card-wrapper\\index.tsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1545,"mtime":1608743695892,"results":"15","hashOfConfig":"13"},{"size":441,"mtime":1608559173177,"results":"16","hashOfConfig":"13"},{"size":1010,"mtime":1608569484932,"results":"17","hashOfConfig":"13"},{"size":2768,"mtime":1608742292715,"results":"18","hashOfConfig":"13"},{"size":9363,"mtime":1608742322995,"results":"19","hashOfConfig":"13"},{"size":5432,"mtime":1608742574087,"results":"20","hashOfConfig":"13"},{"size":1831,"mtime":1608742855293,"results":"21","hashOfConfig":"13"},{"size":1951,"mtime":1608743030470,"results":"22","hashOfConfig":"13"},{"size":632,"mtime":1608743476539,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"58igfb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\index.tsx",[],["53","54"],"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\reportWebVitals.ts",[],"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\App.tsx",["55"],"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\navbar\\index.tsx",[],"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\card\\index.tsx",[],"C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\radial-chart\\index.tsx",["56"],"import React, { useState, useEffect } from 'react'\r\nimport classNames from 'classnames';\r\nimport './style.css'\r\n\r\ninterface IRadialChart {\r\n    color?: string,\r\n    textColor?: string,\r\n    progress: number,\r\n    unit?: string,\r\n    animationTime?:number\r\n}\r\n\r\nconst RadialChart = ({ color='#818893', progress, textColor='#d1dbe7', unit, animationTime=900 }: IRadialChart) => {\r\n\r\n    const [strokeLength, setStrokeLength] = useState(0);\r\n    const [valueCounter, setValueCounter] = useState(0);\r\n    const radius = 80;\r\n    const strokeWidth = 10;\r\n\r\n    const dimension = 180;\r\n    const circleRadius = Math.min(radius, 85); \r\n    const circumference = 2 * 3.14 * circleRadius;\r\n\r\n\r\n    useEffect(() => {\r\n        setStrokeLength(circumference / 100 * progress);\r\n        animateValue(valueCounter > 0 ? valueCounter : 0,progress,animationTime);\r\n    }, [progress])\r\n\r\n\r\n\r\n    const  animateValue = (start:number, end:number, duration:number)=>{\r\n        let startTimestamp:any = null;\r\n        const step = (timestamp:any) => {\r\n          if (!startTimestamp) startTimestamp = timestamp;\r\n          const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n          \r\n          setValueCounter(Math.floor(progress * (end - start) + start));\r\n          if (progress < 1) {\r\n            window.requestAnimationFrame(step);\r\n          }\r\n        };\r\n        window.requestAnimationFrame(step);\r\n      }\r\n\r\n    return (\r\n        \r\n        <div\r\n            className={classNames('radial-chart', {\r\n                'no-progress': strokeLength === 0\r\n            })}\r\n        >\r\n            <svg viewBox=\"0 0 180 180\" width={dimension} height={dimension}>\r\n                <circle\r\n                    className=\"radial-chart-total\"\r\n                    stroke={color}\r\n                    strokeWidth={strokeWidth}\r\n                    fill=\"none\"\r\n                    cx=\"90\"\r\n                    cy=\"90\"\r\n                    r={circleRadius}\r\n                />\r\n                <circle\r\n                    className=\"radial-chart-progress\"\r\n                    stroke={color}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${strokeLength},${circumference}`}\r\n                    strokeLinecap=\"round\"\r\n                    fill=\"none\"\r\n                    cx=\"90\"\r\n                    cy=\"90\"\r\n                    r={circleRadius}\r\n                />\r\n                <text x=\"50%\" y=\"50%\" fill={textColor} fontSize='2.5em' dominantBaseline=\"middle\" textAnchor=\"middle\">{valueCounter}</text> \r\n        <text x=\"50%\" y=\"58%\" fill={textColor} fontSize='1em' fillOpacity={.5}  dominantBaseline=\"hanging\" textAnchor=\"middle\">{unit}</text> \r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RadialChart\r\n","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\gauge\\index.tsx",["57"],"import React, { useState, useEffect } from 'react'\r\nimport './style.css'\r\n//global unique key for every gauge (needed for SVG groups to stay separated)\r\nlet uniqueId = 0;\r\n\r\nexport interface IGaugeProps {\r\n    thicknessRation?: number,\r\n    showValue?: boolean,\r\n    showNeedle?: boolean,\r\n    needleColor?: string,\r\n    animated?: boolean,\r\n    label: string;\r\n    min?: number;\r\n    max?: number;\r\n    value: number;\r\n    width: number;\r\n    height: number;\r\n    minMaxLabelsOffset?: number;\r\n    minTxt?: string;\r\n    maxTxt?: string;\r\n    color?: string;\r\n    topLabelStyle?: any;\r\n    valueLabelStyle?: any;\r\n    unitLabelStyle?: any;\r\n    minMaxLabelStyle?: any;\r\n    suffix?: string,\r\n    animationTime?: number\r\n}\r\n\r\nconst Gauge = ({ animationTime = 900, animated = true, needleColor = 'red', showValue = true, showNeedle = false, thicknessRation = 27, label = '', min = 0, max = 100, value = 50, width = 400, height = 320, minMaxLabelsOffset = 25, minTxt, maxTxt, color = '#818893', topLabelStyle = {\r\n    textAnchor: \"middle\",\r\n    fill: \"#999999\",\r\n    stroke: \"none\",\r\n    fontStyle: \"normal\",\r\n    fontVariant: \"normal\",\r\n    fontWeight: \"bold\",\r\n    fontStretch: \"normal\",\r\n    lineHeight: \"normal\",\r\n    fillOpacity: 1,\r\n},\r\nunitLabelStyle = {\r\n    textAnchor: \"middle\",\r\n    fill: \"#fff\",\r\n    stroke: \"none\",\r\n    fontSize: '1em',\r\n    fontStyle: \"normal\",\r\n    fontVariant: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontStretch: \"normal\",\r\n    lineHeight: \"normal\",\r\n    fillOpacity: .5,\r\n}, valueLabelStyle = {\r\n    textAnchor: \"middle\",\r\n    fill: \"#fff\",\r\n    stroke: \"none\",\r\n    fontSize: '2em',\r\n    fontStyle: \"normal\",\r\n    fontVariant: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontStretch: \"normal\",\r\n    lineHeight: \"normal\",\r\n    fillOpacity: 1,\r\n}, minMaxLabelStyle = {\r\n    textAnchor: \"middle\",\r\n    fill: \"#999999\",\r\n    stroke: \"none\",\r\n    fontStyle: \"normal\",\r\n    fontVariant: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontStretch: \"normal\",\r\n    fontSize: 20,\r\n    lineHeight: \"normal\",\r\n    fillOpacity: 1,\r\n}, suffix = '' }: IGaugeProps) => {\r\n\r\n    const [valueCounter, setValueCounter] = useState(0);\r\n    const [uniqueFilterId, setUniqueFilterId] = useState('')\r\n\r\n    useEffect(() => {\r\n        setValueCounter(value);\r\n        if (animated) {\r\n            animateValue(valueCounter > 0 ? valueCounter : 0, value, animationTime);\r\n        }\r\n    }, [value])\r\n\r\n    const animateValue = (start: number, end: number, duration: number) => {\r\n        let startTimestamp: any = null;\r\n        const step = (timestamp: any) => {\r\n            if (!startTimestamp) startTimestamp = timestamp;\r\n            const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n\r\n            setValueCounter(Math.floor(progress * (end - start) + start));\r\n            if (progress < 1) {\r\n                window.requestAnimationFrame(step);\r\n            }\r\n        };\r\n        window.requestAnimationFrame(step);\r\n    }\r\n\r\n    const _getPathValues = (value: number) => {\r\n        if (value < min) value = min;\r\n        if (value > max) value = max;\r\n\r\n        const dx = 0;\r\n        const dy = 0;\r\n\r\n        const alpha =\r\n            (1 - (value - min) / (max - min)) *\r\n            Math.PI;\r\n        const Ro = width / 2 - width / 10;\r\n        const Ri = Ro - width / thicknessRation;\r\n\r\n        const Cx = width / 2 + dx;\r\n        const Cy = height / 1.25 + dy;\r\n\r\n        const Xo = width / 2 + dx + Ro * Math.cos(alpha);\r\n        const Yo =\r\n            height - (height - Cy) - Ro * Math.sin(alpha);\r\n        const Xi = width / 2 + dx + Ri * Math.cos(alpha);\r\n        const Yi =\r\n            height - (height - Cy) - Ri * Math.sin(alpha);\r\n\r\n        return { alpha, Ro, Ri, Cx, Cy, Xo, Yo, Xi, Yi };\r\n    };\r\n\r\n    const _getPath = () => {\r\n        const { Ro, Ri, Cx, Cy, Xo, Yo, Xi, Yi } = _getPathValues(valueCounter);\r\n\r\n        let path = `M${Cx - Ri},${Cy} `;\r\n        path += `L${Cx - Ro},${Cy} `;\r\n        path += `A${Ro},${Ro} 0 0 1 ${Xo},${Yo} `;\r\n        path += `L${Xi},${Yi} `;\r\n        path += `A${Ri},${Ri} 0 0 0 ${Cx - Ri},${Cy} `;\r\n        path += \"Z \";\r\n\r\n        return path;\r\n    };\r\n\r\n    const _getPathValue = (value: number) => {\r\n        const { Ro, Ri, Cx, Cy, Xo, Yo, Xi, Yi } = _getPathValues(value);\r\n\r\n        let path = `M${Cx - Ri},${Cy} `;\r\n        path += `L${Cx - Ro},${Cy} `;\r\n        path += `A${Ro},${Ro} 0 0 1 ${Xo},${Yo} `;\r\n        path += `L${Xi},${Yi} `;\r\n        path += `A${Ri},${Ri} 0 0 0 ${Cx - Ri},${Cy} `;\r\n        path += \"Z \";\r\n\r\n        return path;\r\n    };\r\n\r\n    const renderNeedle = (value: number) => {\r\n        const { Cx, Cy } = _getPathValues(valueCounter);\r\n        let needleWidth = 4;\r\n        let needleSharp = true;\r\n        let diameter = 25;\r\n        let Cyy = Cy * 1\r\n        let Cxx = Cx * 1\r\n        let\r\n            x1 = Cxx,\r\n            y1 = Cyy - (needleWidth / 2),\r\n            x2 = Cxx,\r\n            y2 = Cyy + (needleWidth / 2),\r\n            x3 = diameter,\r\n            y3 = Cyy,\r\n            needleAngle = (180 * value) / max;\r\n\r\n        let needleElm = null;\r\n        if (needleSharp) {\r\n            needleElm = (\r\n                <polygon\r\n                    points={`${x1},${y1} ${x2},${y2} ${x3},${y3}`}\r\n                    fill={needleColor}\r\n                >\r\n\r\n                </polygon>\r\n            );\r\n        } else {\r\n            needleElm = (\r\n                <line\r\n                    x1={Cx}\r\n                    y1={Cy}\r\n                    x2={diameter}\r\n                    y2={Cy}\r\n                    fill='none'\r\n                    strokeWidth={needleWidth}\r\n                    stroke={needleColor}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <g className='needle'>\r\n                <g transform={`rotate(${needleAngle} ${Cx} ${Cy})`}>\r\n                    {needleElm}\r\n                </g>\r\n                <circle\r\n                    cx={Cx}\r\n                    cy={Cy}\r\n                    r={2}\r\n                    fill={needleColor}\r\n                >\r\n                </circle>\r\n            </g>\r\n        )\r\n\r\n    }\r\n    const { Cx, Ro, Ri, Xo, Cy, Xi } = _getPathValues(max);\r\n    if (!uniqueFilterId) setUniqueFilterId(`filter_${uniqueId++}`);\r\n\r\n    return (\r\n        <svg\r\n            height=\"100%\"\r\n            version=\"1.1\"\r\n            width=\"100%\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            style={{\r\n                width: width,\r\n                height: height,\r\n                overflow: \"hidden\",\r\n                position: \"relative\",\r\n                left: 0,\r\n                top: 0,\r\n            }}\r\n        >\r\n            <defs>\r\n                <filter id={uniqueFilterId}>\r\n                    <feOffset dx=\"0\" dy=\"3\" />\r\n                    <feGaussianBlur result=\"offset-blur\" stdDeviation=\"5\" />\r\n                    <feComposite\r\n                        operator=\"out\"\r\n                        in=\"SourceGraphic\"\r\n                        in2=\"offset-blur\"\r\n                        result=\"inverse\"\r\n                    />\r\n                    <feFlood floodColor=\"black\" floodOpacity=\"0.2\" result=\"color\" />\r\n                    <feComposite\r\n                        operator=\"in\"\r\n                        in=\"color\"\r\n                        in2=\"inverse\"\r\n                        result=\"shadow\"\r\n                    />\r\n                    <feComposite operator=\"over\" in=\"shadow\" in2=\"SourceGraphic\" />\r\n                </filter>\r\n            </defs>\r\n            <path\r\n                className='gauge-total'\r\n                fill={color}\r\n                stroke=\"none\"\r\n                strokeLinecap=\"round\"\r\n                d={_getPathValue(max)}\r\n                filter={`url(#${uniqueFilterId})`}\r\n            />\r\n            <path\r\n                strokeLinecap=\"round\"\r\n                className='gauge-progress'\r\n                fill={color}\r\n                stroke=\"none\"\r\n                d={_getPath()}\r\n                filter={`url(#${uniqueFilterId})`}\r\n            />\r\n\r\n            {showNeedle && renderNeedle(valueCounter)}\r\n\r\n            <text\r\n                x={width / 2}\r\n                y={height / 8}\r\n                textAnchor=\"middle\"\r\n                style={topLabelStyle}\r\n            >\r\n                {label}\r\n            </text>\r\n            <text\r\n                x={width / 2}\r\n                y={(height / 5) * 3}\r\n                textAnchor=\"middle\"\r\n                style={valueLabelStyle}\r\n            >\r\n                {showValue && (valueCounter)}\r\n            </text>\r\n            <text\r\n                x={width / 2}\r\n                y={(height / 5) * 3.55}\r\n                textAnchor=\"middle\"\r\n                style={unitLabelStyle}\r\n            >\r\n                {showValue && suffix}\r\n            </text>            \r\n            <text\r\n                x={(Cx - Ro + (Cx - Ri)) / 2}\r\n                y={Cy + minMaxLabelsOffset}\r\n                textAnchor=\"middle\"\r\n                style={minMaxLabelStyle}\r\n            >\r\n                {minTxt || min}\r\n            </text>\r\n            <text\r\n                x={(Xo + Xi) / 2}\r\n                y={Cy + minMaxLabelsOffset}\r\n                textAnchor=\"middle\"\r\n                style={minMaxLabelStyle}\r\n            >\r\n                {maxTxt || max}\r\n            </text>\r\n\r\n        </svg>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Gauge\r\n","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\radial-gauge\\index.tsx",["58"],"import React, { useState, useEffect } from 'react'\r\nimport classNames from 'classnames';\r\nimport './style.css'\r\n\r\ninterface IRadialChart {\r\n    color?: string,\r\n    textColor?: string,\r\n    value: number,\r\n    unit?: string,\r\n    animationTime?:number,\r\n    max?:number,\r\n    min?:number,\r\n    needleColor?: string,\r\n    thicknessRation?: number,\r\n    showNeedle?: boolean,\r\n}\r\n\r\nconst RadialGauge = ({ showNeedle= true, color='#818893',needleColor='red', min=0, max=100, value, textColor='#d1dbe7',thicknessRation = 27, unit, animationTime=900 }: IRadialChart) => {\r\n\r\n    const [strokeLength, setStrokeLength] = useState(0);\r\n    const [valueCounter, setValueCounter] = useState(0);\r\n    const radius = 80;\r\n    const strokeWidth = 10;\r\n\r\n    const dimension = 180;\r\n    const circleRadius = Math.min(radius, 85); \r\n    const circumference = 2 * 3.14 * circleRadius;\r\n\r\n\r\n    useEffect(() => {\r\n        setStrokeLength(circumference / max * value);\r\n        animateValue(valueCounter > 0 ? valueCounter : 0,value,animationTime);\r\n    }, [value])\r\n\r\n    const _getPathValues = (value: number) => {\r\n        if (value < min) value = min;\r\n        if (value > max) value = max;\r\n        let width = dimension;\r\n        let height = dimension;\r\n\r\n        const dx = 0;\r\n        const dy = 0;\r\n\r\n        const alpha =\r\n            (1 - (value - min) / (max - min)) *\r\n            Math.PI;\r\n        const Ro = width / 2 - width / 10;\r\n        const Ri = Ro - width / thicknessRation;\r\n\r\n        const Cx = width / 2 + dx;\r\n        const Cy = height / 2 + dy;\r\n\r\n        const Xo = width / 2 + dx + Ro * Math.cos(alpha);\r\n        const Yo =\r\n            height - (height - Cy) - Ro * Math.sin(alpha);\r\n        const Xi = width / 2 + dx + Ri * Math.cos(alpha);\r\n        const Yi =\r\n            height - (height - Cy) - Ri * Math.sin(alpha);\r\n\r\n        return { alpha, Ro, Ri, Cx, Cy, Xo, Yo, Xi, Yi };\r\n    };\r\n\r\n    const renderNeedle = (value: number) => {\r\n        const { Cx, Cy } = _getPathValues(valueCounter);\r\n        let needleWidth = 4;\r\n        let needleSharp = true;\r\n        let diameter = 15;\r\n        let Cyy = Cy * 1\r\n        let Cxx = Cx * 1\r\n        let\r\n            x1 = Cxx,\r\n            y1 = Cyy - (needleWidth / 2),\r\n            x2 = Cxx,\r\n            y2 = Cyy + (needleWidth / 2),\r\n            x3 = diameter,\r\n            y3 = Cyy,\r\n            needleAngle = (360 * ( value / max )) - 86.25\r\n\r\n        let needleElm = null;\r\n        if (needleSharp) {\r\n            needleElm = (\r\n                <polygon\r\n                    points={`${x1},${y1} ${x2},${y2} ${x3},${y3}`}\r\n                    fill={needleColor}\r\n                >\r\n\r\n                </polygon>\r\n            );\r\n        } else {\r\n            needleElm = (\r\n                <line\r\n                    x1={Cx}\r\n                    y1={Cy}\r\n                    x2={diameter}\r\n                    y2={Cy}\r\n                    fill='none'\r\n                    strokeWidth={needleWidth}\r\n                    stroke={needleColor}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <g className='needle'>\r\n                <g transform={`rotate(${needleAngle} ${Cx} ${Cy})`}>\r\n                    {needleElm}\r\n                </g>\r\n                <circle\r\n                    cx={Cx}\r\n                    cy={Cy}\r\n                    r={2}\r\n                    fill={needleColor}\r\n                >\r\n                </circle>\r\n            </g>\r\n        )\r\n\r\n    }\r\n\r\n    const  animateValue = (start:number, end:number, duration:number)=>{\r\n        let startTimestamp:any = null;\r\n        const step = (timestamp:any) => {\r\n          if (!startTimestamp) startTimestamp = timestamp;\r\n          const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n          \r\n          setValueCounter(Math.floor(progress * (end - start) + start));\r\n          if (progress < 1) {\r\n            window.requestAnimationFrame(step);\r\n          }\r\n        };\r\n        window.requestAnimationFrame(step);\r\n      }\r\n\r\n    return (\r\n        \r\n        <div\r\n            className={classNames('radial-gauge', {\r\n                'no-progress': strokeLength === 0\r\n            })}\r\n        >\r\n            <svg viewBox=\"0 0 180 180\" width={dimension} height={dimension}>\r\n                <circle\r\n                    className=\"radial-gauge-total\"\r\n                    stroke={color}\r\n                    strokeWidth={strokeWidth}\r\n                    fill=\"none\"\r\n                    cx=\"90\"\r\n                    cy=\"90\"\r\n                    r={circleRadius}\r\n                />\r\n                <circle\r\n                    className=\"radial-gauge-progress\"\r\n                    stroke={color}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${strokeLength},${circumference}`}\r\n                    strokeLinecap=\"square\"\r\n                    fill=\"none\"\r\n                    cx=\"90\"\r\n                    cy=\"90\"\r\n                    r={circleRadius}\r\n                />\r\n                   {showNeedle && renderNeedle(valueCounter)}\r\n                 <text x=\"50%\" y=\"65%\" fill={textColor} fontSize='2.5em' dominantBaseline=\"middle\" textAnchor=\"middle\">{valueCounter}</text>  \r\n        <text x=\"50%\" y=\"72%\" fill={textColor} fillOpacity={.5} fontSize='1em'  dominantBaseline=\"hanging\" textAnchor=\"middle\">{unit}</text> \r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RadialGauge\r\n","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\value-card-indicator\\index.tsx",["59"],"import React,{useState, useEffect} from 'react'\r\nimport './style.css'\r\n\r\ninterface IValueCardIndicator{\r\n  width: number,\r\n  height: number,\r\n  value: number,\r\n  unit?: string,\r\n  title?: string,\r\n  icon?:  any,\r\n  animationTime?: number \r\n}\r\n\r\nconst ValueCardIndicator = ({width, height, value, unit, title, icon, animationTime=300}:IValueCardIndicator) => {\r\n\r\n  const [valueCounter, setValueCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    animateValue(valueCounter > 0 ? valueCounter : 0,value,animationTime);\r\n}, [value])\r\n\r\nconst  animateValue = (start:number, end:number, duration:number)=>{\r\n  let startTimestamp:any = null;\r\n  const step = (timestamp:any) => {\r\n    if (!startTimestamp) startTimestamp = timestamp;\r\n    const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n    \r\n    setValueCounter(Math.floor(progress * (end - start) + start));\r\n    if (progress < 1) {\r\n      window.requestAnimationFrame(step);\r\n    }\r\n  };\r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\n    return (\r\n\r\n  <div className='value-card-indicator-wrapper' style={{width:`${width}em`, height:`${height}em`}}>\r\n    <span style={{fontSize:'.7em', color: '#fff', padding: '.5em', opacity: .7}}>{title}</span>\r\n    <div className=\"value-card-indicator-container\">\r\n\r\n    {icon && <span style={{color: '#fff', fontSize:'1.4em',marginRight:'.2em', opacity:'.5'}}>{icon}</span>}\r\n\r\n     {/*  <img src=\"https://www.w3schools.com/howto/img_avatar.png\" alt=\"Avatar\" className=\"avatar-value-card-indicator\" style={{width:'40px'}}/> */}\r\n     \r\n      <div>\r\n      \r\n      <span style={{fontSize:'2.5em', color: '#fff'}}>{valueCounter}</span>\r\n      <span style={{ marginLeft:'.3em', fontSize:'1em', color: '#fff', opacity:'.5'}}>{unit}</span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ValueCardIndicator\r\n","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\value-circle-card-indicator\\index.tsx",["60"],"import React, { useState, useEffect } from 'react'\r\nimport './style.css'\r\n\r\ninterface IValueCircleCardIndicator {\r\n  width: number,\r\n  height: number,\r\n  value: number,\r\n  unit?: string,\r\n  title?: string,\r\n  icon?: any,\r\n  animationTime?: number\r\n}\r\n\r\nconst ValueCircleCardIndicator = ({ width, height, value, unit, title, icon, animationTime = 300 }: IValueCircleCardIndicator) => {\r\n\r\n  const [valueCounter, setValueCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    animateValue(valueCounter > 0 ? valueCounter : 0, value, animationTime);\r\n  }, [value])\r\n\r\n  const animateValue = (start: number, end: number, duration: number) => {\r\n    let startTimestamp: any = null;\r\n    const step = (timestamp: any) => {\r\n      if (!startTimestamp) startTimestamp = timestamp;\r\n      const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n\r\n      setValueCounter(Math.floor(progress * (end - start) + start));\r\n      if (progress < 1) {\r\n        window.requestAnimationFrame(step);\r\n      }\r\n    };\r\n    window.requestAnimationFrame(step);\r\n  }\r\n\r\n  return (\r\n\r\n    <div className='value-circle-card-indicator-wrapper' style={{ width: `${width}em`, height: `${height}em` }}>\r\n      <span style={{ textAlign: 'center', fontSize: '.7em', color: '#fff', opacity: .7 }}>{title}</span>\r\n      <div className=\"value-circle-card-indicator-container\">\r\n\r\n        {icon && <span style={{ color: '#fff', fontSize: '1.4em', marginRight: '.2em', opacity: '.5' }}>{icon}</span>}\r\n\r\n        {/*  <img src=\"https://www.w3schools.com/howto/img_avatar.png\" alt=\"Avatar\" className=\"avatar-value-circle-card-indicator\" style={{width:'40px'}}/> */}\r\n\r\n        <div>\r\n\r\n          <span style={{ fontSize: '2.5em', color: '#fff' }}>{valueCounter}</span>\r\n          <span style={{ marginLeft: '.3em', fontSize: '1em', color: '#fff', opacity: '.5' }}>{unit}</span>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ValueCircleCardIndicator\r\n","C:\\Users\\netofrancisc\\Desktop\\projetos_git\\react-components\\react-components\\src\\components\\card-wrapper\\index.tsx",["61","62"],"import React,{useState, useEffect} from 'react'\r\nimport './style.css'\r\n\r\ninterface IValueCardIndicator{\r\n  width: number,\r\n  height: number,\r\n  title?: string,\r\n  children: any\r\n}\r\n\r\nconst CardWrapper = ({width, height, title, ...rest}:IValueCardIndicator) => {\r\n\r\n\r\n    return (\r\n\r\n  <div className='card-wrapper-indicator-wrapper' style={{width:`${width}em`, height:`${height}em`}}>\r\n    <span style={{fontSize:'.7em', color: '#fff', padding: '.5em', opacity: .7}}>{title}</span>\r\n    <div className=\"card-wrapper-indicator-container\">\r\n\r\n      {rest.children}\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardWrapper\r\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":9,"column":10,"nodeType":"69","messageId":"70","endLine":9,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":28,"column":8,"nodeType":"73","endLine":28,"endColumn":18,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":84,"column":8,"nodeType":"73","endLine":84,"endColumn":15,"suggestions":"76"},{"ruleId":"71","severity":1,"message":"77","line":33,"column":8,"nodeType":"73","endLine":33,"endColumn":15,"suggestions":"78"},{"ruleId":"71","severity":1,"message":"79","line":20,"column":4,"nodeType":"73","endLine":20,"endColumn":11,"suggestions":"80"},{"ruleId":"71","severity":1,"message":"79","line":20,"column":6,"nodeType":"73","endLine":20,"endColumn":13,"suggestions":"81"},{"ruleId":"67","severity":1,"message":"82","line":1,"column":15,"nodeType":"69","messageId":"70","endLine":1,"endColumn":23},{"ruleId":"67","severity":1,"message":"83","line":1,"column":25,"nodeType":"69","messageId":"70","endLine":1,"endColumn":34},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"@typescript-eslint/no-unused-vars","'FaTemperatureHigh' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animationTime', 'circumference', and 'valueCounter'. Either include them or remove the dependency array.","ArrayExpression",["86"],"React Hook useEffect has missing dependencies: 'animated', 'animationTime', and 'valueCounter'. Either include them or remove the dependency array.",["87"],"React Hook useEffect has missing dependencies: 'animationTime', 'circumference', 'max', and 'valueCounter'. Either include them or remove the dependency array. If 'setStrokeLength' needs the current value of 'max', you can also switch to useReducer instead of useState and read 'max' in the reducer.",["88"],"React Hook useEffect has missing dependencies: 'animationTime' and 'valueCounter'. Either include them or remove the dependency array.",["89"],["90"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},"Update the dependencies array to be: [animationTime, circumference, progress, valueCounter]",{"range":"100","text":"101"},"Update the dependencies array to be: [animated, animationTime, value, valueCounter]",{"range":"102","text":"103"},"Update the dependencies array to be: [animationTime, circumference, max, value, valueCounter]",{"range":"104","text":"105"},"Update the dependencies array to be: [animationTime, value, valueCounter]",{"range":"106","text":"107"},{"range":"108","text":"107"},[856,866],"[animationTime, circumference, progress, valueCounter]",[2394,2401],"[animated, animationTime, value, valueCounter]",[1039,1046],"[animationTime, circumference, max, value, valueCounter]",[521,528],"[animationTime, value, valueCounter]",[550,557]]